using UnityEngine;
using System;
using System.Collections.Generic;


namespace Serverville
{
	
	public class ServervilleClient
	{
		public delegate void OnInitComplete(SignInReply userInfo, ErrorReply err);

		internal string ServerURL;
		internal string SessionId;

		private SignInReply UserInfo;

		public bool LogMessages = false;

		private ServervilleTransport Transport;

		public delegate void ErrorHandlerDelegate(ErrorReply err);
		public delegate void ServerMessageTypeHandlerDelegate(string from, string json);
		public delegate void ServerMessageHandlerDelegate(string messageType, string from, string json);

		public ErrorHandlerDelegate GlobalErrorHandler;
		public ServerMessageHandlerDelegate ServerMessageHandler;
		public Dictionary<string,ServerMessageTypeHandlerDelegate> ServerMessageTypeHandlers;

		public ServervilleClient(string url)
		{
			ServerURL = url;
			SessionId = PlayerPrefs.GetString("Serverville"+ServerURL+"SessionId", null);
			if(SessionId != null && SessionId.Length == 0)
				SessionId = null;

			ServerMessageTypeHandlers = new Dictionary<string,ServerMessageTypeHandlerDelegate>();

			if(ServerURL.StartsWith("http://") || ServerURL.StartsWith("https://"))
			{
				Transport = new ServervilleHttp(this);
			}
			else if(ServerURL.StartsWith("ws://") || ServerURL.StartsWith("wss://"))
			{
				Transport = new ServervilleWS(this);
			}
			else
			{
				throw new Exception("Unknown server protocol: "+url);
			}
		}

		public void Init(OnInitComplete onComplete)
		{
			Transport.Init(delegate(ErrorReply initErr)
				{
					if(initErr != null)
					{
						onComplete(null, initErr);
						return;
					}

					if(SessionId != null)
					{
						ValidateSession(SessionId, delegate(SignInReply reply)
							{
								onComplete(reply, null);
							},
							delegate(ErrorReply err)
							{
								SignOut();
								onComplete(null, err);
							});
					}
					else
					{
						onComplete(null, null);
					}

				});
		}

		private void SetUserInfo(SignInReply userInfo)
		{
			if(userInfo == null)
			{
				UserInfo = null;
				SessionId = null;
				PlayerPrefs.DeleteKey("Serverville"+ServerURL+"SessionId");
			}
			else
			{
				UserInfo = userInfo;
				SessionId = userInfo.session_id;
				PlayerPrefs.SetString("Serverville"+ServerURL+"SessionId", SessionId);
				PlayerPrefs.Save();
			}
		}

		public bool IsSignedIn()
		{
			return SessionId != null;
		}

		public void SignOut()
		{
			SetUserInfo(null);
		}

		public SignInReply GetUserInfo()
		{
			return UserInfo;
		}

		internal void OnServerError(ErrorReply err)
		{
			if(GlobalErrorHandler != null)
				GlobalErrorHandler(err);
		}

		internal void OnServerMessage(string messageId, string from, string jsonData)
		{
			ServerMessageTypeHandlerDelegate handler = null;
			ServerMessageTypeHandlers.TryGetValue(messageId, out handler);
			if(handler != null)
			{
				handler(from, jsonData);
			}
			else if(ServerMessageHandler != null)
			{
				ServerMessageHandler(messageId, from, jsonData);
			}
			else
			{
				Debug.Log("No handler for message type: "+messageId);
			}
		}
        public void ApiByName<ReqType,ReplyType>(string api, ReqType request, Action<ReplyType> onSuccess, OnErrorReply onErr)
		{
			Transport.CallAPI<ReplyType>(api, request,
				onSuccess,
				onErr
            ); 
		}
        
{{APIs}}

	}

}