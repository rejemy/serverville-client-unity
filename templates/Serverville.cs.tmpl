using UnityEngine;
using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Serverville
{
	class ServervilleClientComponent : MonoBehaviour 
	{
		private ServervilleClient Client;

		public static ServervilleClientComponent Get(ServervilleClient client)
		{
			GameObject obj = GameObject.Find("/Serverville");
			if(obj == null)
			{
				obj = new GameObject("Serverville");
				DontDestroyOnLoad(obj);
			}

			ServervilleClientComponent comp = obj.GetComponent<ServervilleClientComponent>();
			if(comp == null)
			{
				comp = obj.AddComponent<ServervilleClientComponent>();
				comp.Client = client;
			}

			return comp;
		}

		public void StartPingTimer(float period)
		{
			InvokeRepeating("PingTimer", period, period);
		}

		public void StopPingTimer()
		{
			CancelInvoke("PingTimer");
		}

		public void PingTimer()
		{
			Client.Ping();
		}
	}

	public class ServervilleClient
	{
		public delegate void OnInitComplete(SignInReply userInfo, ErrorReply err);
		public delegate void OnSwitchHostsComplete(ErrorReply err);

		internal string ServerURL;
		internal string ServerHost;
		internal string ServerProtocol;

		internal string SessionId;

		private UserAccountInfo UserInfo;

		public bool LogMessages = false;

		private ServervilleTransport Transport;

		public delegate void ErrorHandlerDelegate(ErrorReply err);
		public delegate void UserMessageHandlerDelegate(UserMessageNotification message);

		public ErrorHandlerDelegate GlobalErrorHandler;
		public UserMessageHandlerDelegate ServerMessageHandler;
		public Dictionary<string,UserMessageHandlerDelegate> ServerMessageTypeHandlers;

		public float PingPeriod = 5.0f;
		private float LastSend = 0.0f;

		private long LastServerTime = 0;
		private long LastServerTimeAt = 0;

		public ServervilleClient(string url)
		{
			SessionId = PlayerPrefs.GetString("Serverville"+ServerURL+"SessionId", null);
			if(SessionId != null && SessionId.Length == 0)
				SessionId = null;
			
			InitServerURL(url);

			ServerMessageTypeHandlers = new Dictionary<string,UserMessageHandlerDelegate>();
		}

		private void InitServerURL(string url)
		{
			ServerURL = url;
			int protocolLength = url.IndexOf("://");
			if(protocolLength < 2)
				throw new Exception("Malformed url: "+url);
			ServerHost = ServerURL.Substring(protocolLength+3);
			ServerProtocol = ServerURL.Substring(0, protocolLength);

			if(ServerURL.StartsWith("http://") || ServerURL.StartsWith("https://"))
			{
				Transport = new ServervilleHttp(this);
			}
			else if(ServerURL.StartsWith("ws://") || ServerURL.StartsWith("wss://"))
			{
				Transport = new ServervilleWS(this);
			}
			else
			{
				throw new Exception("Unknown server protocol: "+url);
			}
		}

		public void Init(OnInitComplete onComplete)
		{
			Transport.Init(delegate(ErrorReply initErr)
				{
					if(initErr != null)
					{
						onComplete(null, initErr);
						return;
					}

					if(SessionId != null)
					{
						ValidateSession(SessionId,
							delegate(SignInReply reply)
							{
								onComplete(reply, null);
							},
							delegate(ErrorReply err)
							{
								SignOut();
								onComplete(null, err);
							});
					}
					else
					{
						onComplete(null, null);
					}

				}
			);
		}

		public void SwitchHosts(string host, OnSwitchHostsComplete onComplete)
		{
			string url = host;
			if(host.IndexOf("://") < 0)
			{
				url = ServerProtocol + "://"+host;
			}

			if(ServerURL == host)
			{
				onComplete(null);
				return;
			}

			Shutdown();

			InitServerURL(url);
			Init(delegate(SignInReply userInfo, ErrorReply err) {
				onComplete(err);
			});
		}

		private void SetUserInfo(SignInReply reply)
		{
			if(reply == null)
			{
				UserInfo = null;
				SessionId = null;
				PlayerPrefs.DeleteKey("Serverville"+ServerURL+"SessionId");
			}
			else
			{
				UserInfo = new UserAccountInfo();
				UserInfo.email = reply.email;
				UserInfo.session_id = reply.session_id;
				UserInfo.username = reply.username;
				UserInfo.user_id = reply.user_id;
				SessionId = reply.session_id;
				PlayerPrefs.SetString("Serverville"+ServerURL+"SessionId", SessionId);
				PlayerPrefs.Save();

				setServerTime((long)reply.time);
			}
		}

		public bool IsSignedIn()
		{
			return SessionId != null;
		}

		public void SignOut()
		{
			SetUserInfo(null);
		}

		public UserAccountInfo GetUserInfo()
		{
			return UserInfo;
		}

		internal void OnServerError(ErrorReply err)
		{
			if(GlobalErrorHandler != null)
				GlobalErrorHandler(err);
		
			if(err.errorCode == 19) // Session expired
			{
				Shutdown();
			}
		}

		internal void OnServerNotification(string notificationType, string notificationJson)
		{
			switch(notificationType)
			{
				case "error":
				{
					// Pushed error
					ErrorReply err = JsonConvert.DeserializeObject<ErrorReply>(notificationJson, ServervilleHttp.JsonSettings);
					OnServerError(err);
					return;
				}
				case "msg":
				{
					UserMessageNotification note = JsonConvert.DeserializeObject<UserMessageNotification>(notificationJson, ServervilleHttp.JsonSettings);
					OnUserMessage(note);
					return;
				}
				case "resJoined":
				{
					
					return;
				}
				case "resLeft":
				{

					return;
				}
				case "resEvent":
				{

					return;
				}
				case "resUpdate":
				{

					return;
				}
				default:
				{
					Debug.Log("Unknown server notification type: "+notificationType);
					return;
				}
			}

		}

		internal void OnUserMessage(UserMessageNotification message)
		{
			UserMessageHandlerDelegate handler = null;
			ServerMessageTypeHandlers.TryGetValue(message.message_type, out handler);
			if(handler != null)
			{
				handler(message);
			}
			else if(ServerMessageHandler != null)
			{
				ServerMessageHandler(message);
			}
			else
			{
				Debug.Log("No handler for use message type: "+message.message_type);
			}
		}

		internal void OnTransportClosed()
		{
			StopPingTimer();
			OnServerError(ErrorReply.makeClientErrorCode(-1, "Closed"));
		}

		internal void StartPingTimer()
		{
			ServervilleClientComponent comp = ServervilleClientComponent.Get(this);
			comp.StartPingTimer(PingPeriod);
		}

		internal void StopPingTimer()
		{
			ServervilleClientComponent comp = ServervilleClientComponent.Get(this);
			comp.StopPingTimer();
		}

		internal void Ping()
		{
			if(Time.unscaledTime - LastSend < 4.0)
				return;

			GetTime(delegate(ServerTime reply)
				{
					setServerTime((long)reply.time);
				},
				null);
		}

		internal void setServerTime(long time)
		{
			LastServerTime = time;
			LastServerTimeAt = (long)(Time.unscaledTime * 1000.0);
		}

		long getServerTime()
		{
			if(LastServerTime == 0)
				return 0;
			return ((long)(Time.unscaledTime * 1000.0) - LastServerTimeAt) + LastServerTime;
		}

		float getLastSendTime()
		{
			return LastSend;
		}

		public void Shutdown()
		{
			if(Transport != null)
				Transport.Close();
		}

        public void ApiByName<ReqType,ReplyType>(string api, ReqType request, Action<ReplyType> onSuccess, OnErrorReply onErr)
		{
			Transport.CallAPI<ReplyType>(api, request,
				onSuccess,
				onErr
            ); 

            LastSend = Time.unscaledTime;
		}
        
{{APIs}}

	}

}